import { Task } from "../types/task";

export const newTasks: Task.TaskStatewithLogs[] = [
    {
        domain: 'ServiceA',
        task: 'processRT',
        taskType: Task.TaskType.TRIGGER,
        status: Task.TaskStatus.TERMINATED,
        contextId: null,
        isAvailable: true,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]],
    },
    {
        domain: 'ServiceA',
        task: 'processRT',
        taskType: Task.TaskType.WORK,
        status: Task.TaskStatus.TERMINATED,
        contextId: null,
        isAvailable: true,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]],
    },
    {
        domain: 'ServiceA',
        task: 'processRT',
        taskType: Task.TaskType.CRON,
        status: Task.TaskStatus.WAITING,
        contextId: null,
        isAvailable: false,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]]
    },
    {
        domain: 'ServiceB',
        task: 'processRT',
        taskType: Task.TaskType.TRIGGER,
        status: Task.TaskStatus.TERMINATED,
        contextId: null,
        isAvailable: true,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]],
    },
    {
        domain: 'ServiceB',
        task: 'processRT',
        taskType: Task.TaskType.WORK,
        status: Task.TaskStatus.TERMINATED,
        contextId: null,
        isAvailable: true,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]],
    },
    {
        domain: 'ServiceB',
        task: 'processRT',
        taskType: Task.TaskType.CRON,
        status: Task.TaskStatus.WAITING,
        contextId: null,
        isAvailable: true,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]]
    },
    {
        domain: 'ServiceC',
        task: 'processRT',
        taskType: Task.TaskType.TRIGGER,
        status: Task.TaskStatus.TERMINATED,
        contextId: null,
        isAvailable: true,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]],
    },
    {
        domain: 'ServiceC',
        task: 'processHelper',
        taskType: Task.TaskType.TRIGGER,
        status: Task.TaskStatus.TERMINATED,
        contextId: null,
        isAvailable: true,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]],
    },
    {
        domain: 'ServiceD',
        task: 'processRT',
        taskType: Task.TaskType.TRIGGER,
        status: Task.TaskStatus.TERMINATED,
        contextId: null,
        isAvailable: true,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]],
    },
    {
        domain: 'ServiceD',
        task: 'processRT',
        taskType: Task.TaskType.WORK,
        status: Task.TaskStatus.TERMINATED,
        contextId: null,
        isAvailable: true,
        updatedAt: null,
        startAt: null,
        endAt: null,
        recentLogs: [[]],
    },
];

export const newWorks: Task.WorkState[] = [
    {
        work: 'sampleWork',
        workType: Task.TaskType.TRIGGER,
        status: Task.TaskStatus.TERMINATED,
        contextId: null,
        updatedAt: null,
        startAt: null,
        endAt: null,
        taskList: [
            {
                domain: 'ServiceA',
                task: 'processRT',
                taskType: Task.TaskType.WORK,
            },
            {
                domain: 'ServiceB',
                task: 'processRT',
                taskType: Task.TaskType.WORK,
            },
            {
                domain: 'ServiceD',
                task: 'processRT',
                taskType: Task.TaskType.WORK,
            }
        ],
    }
]

export const newTaskStatistic: Task.StatisticLog[] = [
    {
        domain: 'ServiceA',
        task: 'processRT',
        taskType: Task.TaskType.TRIGGER,
        executionTime: null,
        data: null,
        timestamp: null,
    },
    {
        domain: 'ServiceA',
        task: 'processRT',
        taskType: Task.TaskType.CRON,
        executionTime: null,
        data: null,
        timestamp: null,
    },
    {
        domain: 'ServiceA',
        task: 'processRT',
        taskType: Task.TaskType.WORK,
        executionTime: null,
        data: null,
        timestamp: null,
    },
    {
        domain: 'ServiceB',
        task: 'processRT',
        taskType: Task.TaskType.TRIGGER,
        executionTime: null,
        data: null,
        timestamp: null,
    },
    {
        domain: 'ServiceB',
        task: 'processRT',
        taskType: Task.TaskType.WORK,
        executionTime: null,
        data: null,
        timestamp: null,
    },
    {
        domain: 'ServiceB',
        task: 'processRT',
        taskType: Task.TaskType.CRON,
        executionTime: null,
        data: null,
        timestamp: null,
    },
    {
        domain: 'ServiceC',
        task: 'processRT',
        taskType: Task.TaskType.TRIGGER,
        executionTime: null,
        data: null,
        timestamp: null,
    },
    {
        domain: 'ServiceC',
        task: 'processHelper',
        taskType: Task.TaskType.TRIGGER,
        executionTime: null,
        data: null,
        timestamp: null,
    },
    {
        domain: 'ServiceD',
        task: 'processRT',
        taskType: Task.TaskType.TRIGGER,
        executionTime: null,
        data: null,
        timestamp: null,
    },
    {
        domain: 'ServiceD',
        task: 'processRT',
        taskType: Task.TaskType.WORK,
        executionTime: null,
        data: null,
        timestamp: null,
    },
]
